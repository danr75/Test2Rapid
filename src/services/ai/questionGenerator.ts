// This is a placeholder service for generating questions
// It will be implemented in Task 4: AI Integration

interface Question {
  id: string;
  text: string;
  options: {
    id: string;
    text: string;
    isCorrect: boolean;
  }[];
  explanation: string;
}

// Mock function to generate a unique ID
const generateId = (): string => {
  return Math.random().toString(36).substring(2, 9);
};

// Mock data for placeholder questions
const mockQuestions = (topic: string): Question[] => {
  return [
    {
      id: generateId(),
      text: `What is a key concept in ${topic}?`,
      options: [
        { id: generateId(), text: 'Mock correct answer', isCorrect: true },
        { id: generateId(), text: 'Mock incorrect answer 1', isCorrect: false },
        { id: generateId(), text: 'Mock incorrect answer 2', isCorrect: false },
      ],
      explanation: `This is a placeholder explanation about ${topic}. In the full implementation, this will be generated by the AI.`,
    },
    {
      id: generateId(),
      text: `Which of the following is true about ${topic}?`,
      options: [
        { id: generateId(), text: 'Mock incorrect answer 1', isCorrect: false },
        { id: generateId(), text: 'Mock correct answer', isCorrect: true },
        { id: generateId(), text: 'Mock incorrect answer 2', isCorrect: false },
      ],
      explanation: `This is another placeholder explanation about ${topic}. The AI will generate more detailed and accurate explanations.`,
    },
  ];
};

// Placeholder function for generating questions
export const generateQuestions = async (topic: string): Promise<Question[]> => {
  // In the future, this will call the OpenAI API
  // For now, we'll return mock data
  return new Promise((resolve) => {
    setTimeout(() => {
      resolve(mockQuestions(topic));
    }, 1000); // Simulate API delay
  });
};

export default {
  generateQuestions,
};
